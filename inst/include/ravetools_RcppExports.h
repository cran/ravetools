// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#ifndef RCPP_ravetools_RCPPEXPORTS_H_GEN_
#define RCPP_ravetools_RCPPEXPORTS_H_GEN_

#include <Rcpp.h>

namespace ravetools {

    using namespace Rcpp;

    namespace {
        void validateSignature(const char* sig) {
            Rcpp::Function require = Rcpp::Environment::base_env()["require"];
            require("ravetools", Rcpp::Named("quietly") = true);
            typedef int(*Ptr_validate)(const char*);
            static Ptr_validate p_validate = (Ptr_validate)
                R_GetCCallable("ravetools", "_ravetools_RcppExport_validate");
            if (!p_validate(sig)) {
                throw Rcpp::function_not_exported(
                    "C++ function with signature '" + std::string(sig) + "' not found in ravetools");
            }
        }
    }

    inline SEXP collapser_cplx(SEXP x, SEXP keep, const int method = 1, const int average = 0) {
        typedef SEXP(*Ptr_collapser_cplx)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_collapser_cplx p_collapser_cplx = NULL;
        if (p_collapser_cplx == NULL) {
            validateSignature("SEXP(*collapser_cplx)(SEXP,SEXP,const int,const int)");
            p_collapser_cplx = (Ptr_collapser_cplx)R_GetCCallable("ravetools", "_ravetools_collapser_cplx");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_collapser_cplx(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(keep)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(average)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP collapser_real(SEXP x, SEXP keep, const int method = 1, const int average = 0) {
        typedef SEXP(*Ptr_collapser_real)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_collapser_real p_collapser_real = NULL;
        if (p_collapser_real == NULL) {
            validateSignature("SEXP(*collapser_real)(SEXP,SEXP,const int,const int)");
            p_collapser_real = (Ptr_collapser_real)R_GetCCallable("ravetools", "_ravetools_collapser_real");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_collapser_real(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(keep)), Shield<SEXP>(Rcpp::wrap(method)), Shield<SEXP>(Rcpp::wrap(average)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP columnQuantile(SEXP& x, const double& prob, const bool& naRm) {
        typedef SEXP(*Ptr_columnQuantile)(SEXP,SEXP,SEXP);
        static Ptr_columnQuantile p_columnQuantile = NULL;
        if (p_columnQuantile == NULL) {
            validateSignature("SEXP(*columnQuantile)(SEXP&,const double&,const bool&)");
            p_columnQuantile = (Ptr_columnQuantile)R_GetCCallable("ravetools", "_ravetools_columnQuantile");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_columnQuantile(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(prob)), Shield<SEXP>(Rcpp::wrap(naRm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP columnMedian(SEXP& x, const bool& naRm) {
        typedef SEXP(*Ptr_columnMedian)(SEXP,SEXP);
        static Ptr_columnMedian p_columnMedian = NULL;
        if (p_columnMedian == NULL) {
            validateSignature("SEXP(*columnMedian)(SEXP&,const bool&)");
            p_columnMedian = (Ptr_columnMedian)R_GetCCallable("ravetools", "_ravetools_columnMedian");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_columnMedian(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(naRm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP fastColMeans(const SEXP& x, const SEXP& col, const SEXP& xDim) {
        typedef SEXP(*Ptr_fastColMeans)(SEXP,SEXP,SEXP);
        static Ptr_fastColMeans p_fastColMeans = NULL;
        if (p_fastColMeans == NULL) {
            validateSignature("SEXP(*fastColMeans)(const SEXP&,const SEXP&,const SEXP&)");
            p_fastColMeans = (Ptr_fastColMeans)R_GetCCallable("ravetools", "_ravetools_fastColMeans");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fastColMeans(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(col)), Shield<SEXP>(Rcpp::wrap(xDim)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP quickQuantile(const SEXP& x, const double& prob, const bool& naRm) {
        typedef SEXP(*Ptr_quickQuantile)(SEXP,SEXP,SEXP);
        static Ptr_quickQuantile p_quickQuantile = NULL;
        if (p_quickQuantile == NULL) {
            validateSignature("SEXP(*quickQuantile)(const SEXP&,const double&,const bool&)");
            p_quickQuantile = (Ptr_quickQuantile)R_GetCCallable("ravetools", "_ravetools_quickQuantile");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_quickQuantile(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(prob)), Shield<SEXP>(Rcpp::wrap(naRm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP quickMedian(const SEXP& x, const bool& naRm) {
        typedef SEXP(*Ptr_quickMedian)(SEXP,SEXP);
        static Ptr_quickMedian p_quickMedian = NULL;
        if (p_quickMedian == NULL) {
            validateSignature("SEXP(*quickMedian)(const SEXP&,const bool&)");
            p_quickMedian = (Ptr_quickMedian)R_GetCCallable("ravetools", "_ravetools_quickMedian");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_quickMedian(Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(naRm)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP fastcov(const SEXP& x1, const SEXP& x2, const SEXP& col1 = R_NilValue, const SEXP& col2 = R_NilValue, const double& df = -1.0) {
        typedef SEXP(*Ptr_fastcov)(SEXP,SEXP,SEXP,SEXP,SEXP);
        static Ptr_fastcov p_fastcov = NULL;
        if (p_fastcov == NULL) {
            validateSignature("SEXP(*fastcov)(const SEXP&,const SEXP&,const SEXP&,const SEXP&,const double&)");
            p_fastcov = (Ptr_fastcov)R_GetCCallable("ravetools", "_ravetools_fastcov");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fastcov(Shield<SEXP>(Rcpp::wrap(x1)), Shield<SEXP>(Rcpp::wrap(x2)), Shield<SEXP>(Rcpp::wrap(col1)), Shield<SEXP>(Rcpp::wrap(col2)), Shield<SEXP>(Rcpp::wrap(df)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP fftw_r2c(SEXP data, int HermConj = 1, int fftwplanopt = 0, SEXP ret = R_NilValue) {
        typedef SEXP(*Ptr_fftw_r2c)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_fftw_r2c p_fftw_r2c = NULL;
        if (p_fftw_r2c == NULL) {
            validateSignature("SEXP(*fftw_r2c)(SEXP,int,int,SEXP)");
            p_fftw_r2c = (Ptr_fftw_r2c)R_GetCCallable("ravetools", "_ravetools_fftw_r2c");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fftw_r2c(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(HermConj)), Shield<SEXP>(Rcpp::wrap(fftwplanopt)), Shield<SEXP>(Rcpp::wrap(ret)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP mvfftw_r2c(SEXP data, int fftwplanopt = 0, SEXP ret = R_NilValue) {
        typedef SEXP(*Ptr_mvfftw_r2c)(SEXP,SEXP,SEXP);
        static Ptr_mvfftw_r2c p_mvfftw_r2c = NULL;
        if (p_mvfftw_r2c == NULL) {
            validateSignature("SEXP(*mvfftw_r2c)(SEXP,int,SEXP)");
            p_mvfftw_r2c = (Ptr_mvfftw_r2c)R_GetCCallable("ravetools", "_ravetools_mvfftw_r2c");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_mvfftw_r2c(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(fftwplanopt)), Shield<SEXP>(Rcpp::wrap(ret)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP fftw_c2c(SEXP data, int inverse = 0, int fftwplanopt = 0, SEXP ret = R_NilValue) {
        typedef SEXP(*Ptr_fftw_c2c)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_fftw_c2c p_fftw_c2c = NULL;
        if (p_fftw_c2c == NULL) {
            validateSignature("SEXP(*fftw_c2c)(SEXP,int,int,SEXP)");
            p_fftw_c2c = (Ptr_fftw_c2c)R_GetCCallable("ravetools", "_ravetools_fftw_c2c");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fftw_c2c(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(inverse)), Shield<SEXP>(Rcpp::wrap(fftwplanopt)), Shield<SEXP>(Rcpp::wrap(ret)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP fftw_c2r(SEXP data, int HermConj = 1, int fftwplanopt = 0, SEXP ret = R_NilValue) {
        typedef SEXP(*Ptr_fftw_c2r)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_fftw_c2r p_fftw_c2r = NULL;
        if (p_fftw_c2r == NULL) {
            validateSignature("SEXP(*fftw_c2r)(SEXP,int,int,SEXP)");
            p_fftw_c2r = (Ptr_fftw_c2r)R_GetCCallable("ravetools", "_ravetools_fftw_c2r");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_fftw_c2r(Shield<SEXP>(Rcpp::wrap(data)), Shield<SEXP>(Rcpp::wrap(HermConj)), Shield<SEXP>(Rcpp::wrap(fftwplanopt)), Shield<SEXP>(Rcpp::wrap(ret)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP conjugate(SEXP data) {
        typedef SEXP(*Ptr_conjugate)(SEXP);
        static Ptr_conjugate p_conjugate = NULL;
        if (p_conjugate == NULL) {
            validateSignature("SEXP(*conjugate)(SEXP)");
            p_conjugate = (Ptr_conjugate)R_GetCCallable("ravetools", "_ravetools_conjugate");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_conjugate(Shield<SEXP>(Rcpp::wrap(data)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

    inline SEXP cpp_filter(SEXP b, SEXP a, SEXP x, SEXP z) {
        typedef SEXP(*Ptr_cpp_filter)(SEXP,SEXP,SEXP,SEXP);
        static Ptr_cpp_filter p_cpp_filter = NULL;
        if (p_cpp_filter == NULL) {
            validateSignature("SEXP(*cpp_filter)(SEXP,SEXP,SEXP,SEXP)");
            p_cpp_filter = (Ptr_cpp_filter)R_GetCCallable("ravetools", "_ravetools_cpp_filter");
        }
        RObject rcpp_result_gen;
        {
            RNGScope RCPP_rngScope_gen;
            rcpp_result_gen = p_cpp_filter(Shield<SEXP>(Rcpp::wrap(b)), Shield<SEXP>(Rcpp::wrap(a)), Shield<SEXP>(Rcpp::wrap(x)), Shield<SEXP>(Rcpp::wrap(z)));
        }
        if (rcpp_result_gen.inherits("interrupted-error"))
            throw Rcpp::internal::InterruptedException();
        if (Rcpp::internal::isLongjumpSentinel(rcpp_result_gen))
            throw Rcpp::LongjumpException(rcpp_result_gen);
        if (rcpp_result_gen.inherits("try-error"))
            throw Rcpp::exception(Rcpp::as<std::string>(rcpp_result_gen).c_str());
        return Rcpp::as<SEXP >(rcpp_result_gen);
    }

}

#endif // RCPP_ravetools_RCPPEXPORTS_H_GEN_
