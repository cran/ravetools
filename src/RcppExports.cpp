// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/ravetools.h"
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// baselineArray
Rcpp::NumericVector baselineArray(const Rcpp::NumericVector& x, const Rcpp::NumericVector& bl, const Rcpp::IntegerVector dims, const Rcpp::IntegerVector bldims, const int tidx, const Rcpp::IntegerVector& per, const Rcpp::IntegerVector& rest, const int method);
RcppExport SEXP _ravetools_baselineArray(SEXP xSEXP, SEXP blSEXP, SEXP dimsSEXP, SEXP bldimsSEXP, SEXP tidxSEXP, SEXP perSEXP, SEXP restSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type bl(blSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type bldims(bldimsSEXP);
    Rcpp::traits::input_parameter< const int >::type tidx(tidxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type per(perSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type rest(restSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(baselineArray(x, bl, dims, bldims, tidx, per, rest, method));
    return rcpp_result_gen;
END_RCPP
}
// bucketFillVolume
SEXP bucketFillVolume(SEXP volume, R_xlen_t x, R_xlen_t y, R_xlen_t z, int fill);
RcppExport SEXP _ravetools_bucketFillVolume(SEXP volumeSEXP, SEXP xSEXP, SEXP ySEXP, SEXP zSEXP, SEXP fillSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type volume(volumeSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type x(xSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type y(ySEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type z(zSEXP);
    Rcpp::traits::input_parameter< int >::type fill(fillSEXP);
    rcpp_result_gen = Rcpp::wrap(bucketFillVolume(volume, x, y, z, fill));
    return rcpp_result_gen;
END_RCPP
}
// collapser_cplx
SEXP collapser_cplx(SEXP x, SEXP keep, const int method, const int average);
static SEXP _ravetools_collapser_cplx_try(SEXP xSEXP, SEXP keepSEXP, SEXP methodSEXP, SEXP averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type average(averageSEXP);
    rcpp_result_gen = Rcpp::wrap(collapser_cplx(x, keep, method, average));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_collapser_cplx(SEXP xSEXP, SEXP keepSEXP, SEXP methodSEXP, SEXP averageSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_collapser_cplx_try(xSEXP, keepSEXP, methodSEXP, averageSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// collapser_real
SEXP collapser_real(SEXP x, SEXP keep, const int method, const int average);
static SEXP _ravetools_collapser_real_try(SEXP xSEXP, SEXP keepSEXP, SEXP methodSEXP, SEXP averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type average(averageSEXP);
    rcpp_result_gen = Rcpp::wrap(collapser_real(x, keep, method, average));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_collapser_real(SEXP xSEXP, SEXP keepSEXP, SEXP methodSEXP, SEXP averageSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_collapser_real_try(xSEXP, keepSEXP, methodSEXP, averageSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// columnQuantile
SEXP columnQuantile(SEXP& x, const double& prob, const bool& naRm);
static SEXP _ravetools_columnQuantile_try(SEXP xSEXP, SEXP probSEXP, SEXP naRmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type naRm(naRmSEXP);
    rcpp_result_gen = Rcpp::wrap(columnQuantile(x, prob, naRm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_columnQuantile(SEXP xSEXP, SEXP probSEXP, SEXP naRmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_columnQuantile_try(xSEXP, probSEXP, naRmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// columnMedian
SEXP columnMedian(SEXP& x, const bool& naRm);
static SEXP _ravetools_columnMedian_try(SEXP xSEXP, SEXP naRmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool& >::type naRm(naRmSEXP);
    rcpp_result_gen = Rcpp::wrap(columnMedian(x, naRm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_columnMedian(SEXP xSEXP, SEXP naRmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_columnMedian_try(xSEXP, naRmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fastColMeans
SEXP fastColMeans(const SEXP& x, const SEXP& col, const SEXP& xDim);
static SEXP _ravetools_fastColMeans_try(SEXP xSEXP, SEXP colSEXP, SEXP xDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type col(colSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type xDim(xDimSEXP);
    rcpp_result_gen = Rcpp::wrap(fastColMeans(x, col, xDim));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fastColMeans(SEXP xSEXP, SEXP colSEXP, SEXP xDimSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fastColMeans_try(xSEXP, colSEXP, xDimSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// quickQuantile
SEXP quickQuantile(const SEXP& x, const double& prob, const bool& naRm);
static SEXP _ravetools_quickQuantile_try(SEXP xSEXP, SEXP probSEXP, SEXP naRmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const double& >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool& >::type naRm(naRmSEXP);
    rcpp_result_gen = Rcpp::wrap(quickQuantile(x, prob, naRm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_quickQuantile(SEXP xSEXP, SEXP probSEXP, SEXP naRmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_quickQuantile_try(xSEXP, probSEXP, naRmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// quickMedian
SEXP quickMedian(const SEXP& x, const bool& naRm);
static SEXP _ravetools_quickMedian_try(SEXP xSEXP, SEXP naRmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const bool& >::type naRm(naRmSEXP);
    rcpp_result_gen = Rcpp::wrap(quickMedian(x, naRm));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_quickMedian(SEXP xSEXP, SEXP naRmSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_quickMedian_try(xSEXP, naRmSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fastcov
SEXP fastcov(const SEXP& x1, const SEXP& x2, const SEXP& col1, const SEXP& col2, const double& df);
static SEXP _ravetools_fastcov_try(SEXP x1SEXP, SEXP x2SEXP, SEXP col1SEXP, SEXP col2SEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type col1(col1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type col2(col2SEXP);
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(fastcov(x1, x2, col1, col2, df));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fastcov(SEXP x1SEXP, SEXP x2SEXP, SEXP col1SEXP, SEXP col2SEXP, SEXP dfSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fastcov_try(x1SEXP, x2SEXP, col1SEXP, col2SEXP, dfSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_r2c
SEXP fftw_r2c(SEXP data, int HermConj, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_r2c_try(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type HermConj(HermConjSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_r2c(data, HermConj, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_r2c(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_r2c_try(dataSEXP, HermConjSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_c2c
SEXP fftw_c2c(SEXP data, int inverse, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_c2c_try(SEXP dataSEXP, SEXP inverseSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_c2c(data, inverse, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_c2c(SEXP dataSEXP, SEXP inverseSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_c2c_try(dataSEXP, inverseSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_c2r
SEXP fftw_c2r(SEXP data, int HermConj, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_c2r_try(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type HermConj(HermConjSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_c2r(data, HermConj, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_c2r(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_c2r_try(dataSEXP, HermConjSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// mvfftw_r2c
SEXP mvfftw_r2c(SEXP data, int fftwplanopt, SEXP ret);
static SEXP _ravetools_mvfftw_r2c_try(SEXP dataSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(mvfftw_r2c(data, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_mvfftw_r2c(SEXP dataSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_mvfftw_r2c_try(dataSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_r2c_2d
SEXP fftw_r2c_2d(SEXP data, int HermConj, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_r2c_2d_try(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type HermConj(HermConjSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_r2c_2d(data, HermConj, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_r2c_2d(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_r2c_2d_try(dataSEXP, HermConjSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_c2c_2d
SEXP fftw_c2c_2d(SEXP data, int inverse, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_c2c_2d_try(SEXP dataSEXP, SEXP inverseSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_c2c_2d(data, inverse, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_c2c_2d(SEXP dataSEXP, SEXP inverseSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_c2c_2d_try(dataSEXP, inverseSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_r2c_3d
SEXP fftw_r2c_3d(SEXP data, int HermConj, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_r2c_3d_try(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type HermConj(HermConjSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_r2c_3d(data, HermConj, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_r2c_3d(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_r2c_3d_try(dataSEXP, HermConjSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// fftw_c2c_3d
SEXP fftw_c2c_3d(SEXP data, int inverse, int fftwplanopt, SEXP ret);
static SEXP _ravetools_fftw_c2c_3d_try(SEXP dataSEXP, SEXP inverseSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_c2c_3d(data, inverse, fftwplanopt, ret));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_fftw_c2c_3d(SEXP dataSEXP, SEXP inverseSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_fftw_c2c_3d_try(dataSEXP, inverseSEXP, fftwplanoptSEXP, retSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// conjugate
SEXP conjugate(SEXP data);
static SEXP _ravetools_conjugate_try(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(conjugate(data));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_conjugate(SEXP dataSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_conjugate_try(dataSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// cpp_filter
SEXP cpp_filter(SEXP b, SEXP a, SEXP x, SEXP z);
static SEXP _ravetools_cpp_filter_try(SEXP bSEXP, SEXP aSEXP, SEXP xSEXP, SEXP zSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< SEXP >::type b(bSEXP);
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type z(zSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_filter(b, a, x, z));
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _ravetools_cpp_filter(SEXP bSEXP, SEXP aSEXP, SEXP xSEXP, SEXP zSEXP) {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_ravetools_cpp_filter_try(bSEXP, aSEXP, xSEXP, zSEXP));
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    bool rcpp_isLongjump_gen = Rcpp::internal::isLongjumpSentinel(rcpp_result_gen);
    if (rcpp_isLongjump_gen) {
        Rcpp::internal::resumeJump(rcpp_result_gen);
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// rawToUInt8
SEXP rawToUInt8(SEXP x);
RcppExport SEXP _ravetools_rawToUInt8(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToUInt8(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToInt8
SEXP rawToInt8(SEXP x);
RcppExport SEXP _ravetools_rawToInt8(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToInt8(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToUInt16
SEXP rawToUInt16(SEXP x);
RcppExport SEXP _ravetools_rawToUInt16(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToUInt16(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToInt16
SEXP rawToInt16(SEXP x);
RcppExport SEXP _ravetools_rawToInt16(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToInt16(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToUInt32
SEXP rawToUInt32(SEXP x);
RcppExport SEXP _ravetools_rawToUInt32(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToUInt32(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToInt32
SEXP rawToInt32(SEXP x);
RcppExport SEXP _ravetools_rawToInt32(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToInt32(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToInt64
SEXP rawToInt64(SEXP x);
RcppExport SEXP _ravetools_rawToInt64(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToInt64(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToFloat
SEXP rawToFloat(SEXP x);
RcppExport SEXP _ravetools_rawToFloat(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToFloat(x));
    return rcpp_result_gen;
END_RCPP
}
// rawToString
SEXP rawToString(SEXP x);
RcppExport SEXP _ravetools_rawToString(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(rawToString(x));
    return rcpp_result_gen;
END_RCPP
}
// shiftArray
SEXP shiftArray(const SEXP& x, const R_xlen_t& alongIdx, const R_xlen_t& unitIdx, const SEXP& shiftAmount);
RcppExport SEXP _ravetools_shiftArray(SEXP xSEXP, SEXP alongIdxSEXP, SEXP unitIdxSEXP, SEXP shiftAmountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t& >::type alongIdx(alongIdxSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t& >::type unitIdx(unitIdxSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type shiftAmount(shiftAmountSEXP);
    rcpp_result_gen = Rcpp::wrap(shiftArray(x, alongIdx, unitIdx, shiftAmount));
    return rcpp_result_gen;
END_RCPP
}
// getDefaultNumThreads
SEXP getDefaultNumThreads();
RcppExport SEXP _ravetools_getDefaultNumThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getDefaultNumThreads());
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _ravetools_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("SEXP(*collapser_cplx)(SEXP,SEXP,const int,const int)");
        signatures.insert("SEXP(*collapser_real)(SEXP,SEXP,const int,const int)");
        signatures.insert("SEXP(*columnQuantile)(SEXP&,const double&,const bool&)");
        signatures.insert("SEXP(*columnMedian)(SEXP&,const bool&)");
        signatures.insert("SEXP(*fastColMeans)(const SEXP&,const SEXP&,const SEXP&)");
        signatures.insert("SEXP(*quickQuantile)(const SEXP&,const double&,const bool&)");
        signatures.insert("SEXP(*quickMedian)(const SEXP&,const bool&)");
        signatures.insert("SEXP(*fastcov)(const SEXP&,const SEXP&,const SEXP&,const SEXP&,const double&)");
        signatures.insert("SEXP(*fftw_r2c)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*fftw_c2c)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*fftw_c2r)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*mvfftw_r2c)(SEXP,int,SEXP)");
        signatures.insert("SEXP(*fftw_r2c_2d)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*fftw_c2c_2d)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*fftw_r2c_3d)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*fftw_c2c_3d)(SEXP,int,int,SEXP)");
        signatures.insert("SEXP(*conjugate)(SEXP)");
        signatures.insert("SEXP(*cpp_filter)(SEXP,SEXP,SEXP,SEXP)");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _ravetools_RcppExport_registerCCallable() { 
    R_RegisterCCallable("ravetools", "_ravetools_collapser_cplx", (DL_FUNC)_ravetools_collapser_cplx_try);
    R_RegisterCCallable("ravetools", "_ravetools_collapser_real", (DL_FUNC)_ravetools_collapser_real_try);
    R_RegisterCCallable("ravetools", "_ravetools_columnQuantile", (DL_FUNC)_ravetools_columnQuantile_try);
    R_RegisterCCallable("ravetools", "_ravetools_columnMedian", (DL_FUNC)_ravetools_columnMedian_try);
    R_RegisterCCallable("ravetools", "_ravetools_fastColMeans", (DL_FUNC)_ravetools_fastColMeans_try);
    R_RegisterCCallable("ravetools", "_ravetools_quickQuantile", (DL_FUNC)_ravetools_quickQuantile_try);
    R_RegisterCCallable("ravetools", "_ravetools_quickMedian", (DL_FUNC)_ravetools_quickMedian_try);
    R_RegisterCCallable("ravetools", "_ravetools_fastcov", (DL_FUNC)_ravetools_fastcov_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_r2c", (DL_FUNC)_ravetools_fftw_r2c_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_c2c", (DL_FUNC)_ravetools_fftw_c2c_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_c2r", (DL_FUNC)_ravetools_fftw_c2r_try);
    R_RegisterCCallable("ravetools", "_ravetools_mvfftw_r2c", (DL_FUNC)_ravetools_mvfftw_r2c_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_r2c_2d", (DL_FUNC)_ravetools_fftw_r2c_2d_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_c2c_2d", (DL_FUNC)_ravetools_fftw_c2c_2d_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_r2c_3d", (DL_FUNC)_ravetools_fftw_r2c_3d_try);
    R_RegisterCCallable("ravetools", "_ravetools_fftw_c2c_3d", (DL_FUNC)_ravetools_fftw_c2c_3d_try);
    R_RegisterCCallable("ravetools", "_ravetools_conjugate", (DL_FUNC)_ravetools_conjugate_try);
    R_RegisterCCallable("ravetools", "_ravetools_cpp_filter", (DL_FUNC)_ravetools_cpp_filter_try);
    R_RegisterCCallable("ravetools", "_ravetools_RcppExport_validate", (DL_FUNC)_ravetools_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_ravetools_baselineArray", (DL_FUNC) &_ravetools_baselineArray, 8},
    {"_ravetools_bucketFillVolume", (DL_FUNC) &_ravetools_bucketFillVolume, 5},
    {"_ravetools_collapser_cplx", (DL_FUNC) &_ravetools_collapser_cplx, 4},
    {"_ravetools_collapser_real", (DL_FUNC) &_ravetools_collapser_real, 4},
    {"_ravetools_columnQuantile", (DL_FUNC) &_ravetools_columnQuantile, 3},
    {"_ravetools_columnMedian", (DL_FUNC) &_ravetools_columnMedian, 2},
    {"_ravetools_fastColMeans", (DL_FUNC) &_ravetools_fastColMeans, 3},
    {"_ravetools_quickQuantile", (DL_FUNC) &_ravetools_quickQuantile, 3},
    {"_ravetools_quickMedian", (DL_FUNC) &_ravetools_quickMedian, 2},
    {"_ravetools_fastcov", (DL_FUNC) &_ravetools_fastcov, 5},
    {"_ravetools_fftw_r2c", (DL_FUNC) &_ravetools_fftw_r2c, 4},
    {"_ravetools_fftw_c2c", (DL_FUNC) &_ravetools_fftw_c2c, 4},
    {"_ravetools_fftw_c2r", (DL_FUNC) &_ravetools_fftw_c2r, 4},
    {"_ravetools_mvfftw_r2c", (DL_FUNC) &_ravetools_mvfftw_r2c, 3},
    {"_ravetools_fftw_r2c_2d", (DL_FUNC) &_ravetools_fftw_r2c_2d, 4},
    {"_ravetools_fftw_c2c_2d", (DL_FUNC) &_ravetools_fftw_c2c_2d, 4},
    {"_ravetools_fftw_r2c_3d", (DL_FUNC) &_ravetools_fftw_r2c_3d, 4},
    {"_ravetools_fftw_c2c_3d", (DL_FUNC) &_ravetools_fftw_c2c_3d, 4},
    {"_ravetools_conjugate", (DL_FUNC) &_ravetools_conjugate, 1},
    {"_ravetools_cpp_filter", (DL_FUNC) &_ravetools_cpp_filter, 4},
    {"_ravetools_rawToUInt8", (DL_FUNC) &_ravetools_rawToUInt8, 1},
    {"_ravetools_rawToInt8", (DL_FUNC) &_ravetools_rawToInt8, 1},
    {"_ravetools_rawToUInt16", (DL_FUNC) &_ravetools_rawToUInt16, 1},
    {"_ravetools_rawToInt16", (DL_FUNC) &_ravetools_rawToInt16, 1},
    {"_ravetools_rawToUInt32", (DL_FUNC) &_ravetools_rawToUInt32, 1},
    {"_ravetools_rawToInt32", (DL_FUNC) &_ravetools_rawToInt32, 1},
    {"_ravetools_rawToInt64", (DL_FUNC) &_ravetools_rawToInt64, 1},
    {"_ravetools_rawToFloat", (DL_FUNC) &_ravetools_rawToFloat, 1},
    {"_ravetools_rawToString", (DL_FUNC) &_ravetools_rawToString, 1},
    {"_ravetools_shiftArray", (DL_FUNC) &_ravetools_shiftArray, 4},
    {"_ravetools_getDefaultNumThreads", (DL_FUNC) &_ravetools_getDefaultNumThreads, 0},
    {"_ravetools_RcppExport_registerCCallable", (DL_FUNC) &_ravetools_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ravetools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
