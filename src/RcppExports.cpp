// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// baselineArray
Rcpp::NumericVector baselineArray(const Rcpp::NumericVector& x, const Rcpp::NumericVector& bl, const Rcpp::IntegerVector dims, const Rcpp::IntegerVector bldims, const int tidx, const Rcpp::IntegerVector& per, const Rcpp::IntegerVector& rest, const int method);
RcppExport SEXP _ravetools_baselineArray(SEXP xSEXP, SEXP blSEXP, SEXP dimsSEXP, SEXP bldimsSEXP, SEXP tidxSEXP, SEXP perSEXP, SEXP restSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type bl(blSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type dims(dimsSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector >::type bldims(bldimsSEXP);
    Rcpp::traits::input_parameter< const int >::type tidx(tidxSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type per(perSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type rest(restSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(baselineArray(x, bl, dims, bldims, tidx, per, rest, method));
    return rcpp_result_gen;
END_RCPP
}
// collapser_cplx
SEXP collapser_cplx(SEXP x, SEXP keep, const int method, const int average);
RcppExport SEXP _ravetools_collapser_cplx(SEXP xSEXP, SEXP keepSEXP, SEXP methodSEXP, SEXP averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type average(averageSEXP);
    rcpp_result_gen = Rcpp::wrap(collapser_cplx(x, keep, method, average));
    return rcpp_result_gen;
END_RCPP
}
// collapser_real
SEXP collapser_real(SEXP x, SEXP keep, const int method, const int average);
RcppExport SEXP _ravetools_collapser_real(SEXP xSEXP, SEXP keepSEXP, SEXP methodSEXP, SEXP averageSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type keep(keepSEXP);
    Rcpp::traits::input_parameter< const int >::type method(methodSEXP);
    Rcpp::traits::input_parameter< const int >::type average(averageSEXP);
    rcpp_result_gen = Rcpp::wrap(collapser_real(x, keep, method, average));
    return rcpp_result_gen;
END_RCPP
}
// fastColMeans
SEXP fastColMeans(const SEXP& x, const SEXP& col, const SEXP& xDim);
RcppExport SEXP _ravetools_fastColMeans(SEXP xSEXP, SEXP colSEXP, SEXP xDimSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type col(colSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type xDim(xDimSEXP);
    rcpp_result_gen = Rcpp::wrap(fastColMeans(x, col, xDim));
    return rcpp_result_gen;
END_RCPP
}
// fastcov
SEXP fastcov(const SEXP& x1, const SEXP& x2, const SEXP& col1, const SEXP& col2, const double& df);
RcppExport SEXP _ravetools_fastcov(SEXP x1SEXP, SEXP x2SEXP, SEXP col1SEXP, SEXP col2SEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x1(x1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type x2(x2SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type col1(col1SEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type col2(col2SEXP);
    Rcpp::traits::input_parameter< const double& >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(fastcov(x1, x2, col1, col2, df));
    return rcpp_result_gen;
END_RCPP
}
// fftw_r2c
SEXP fftw_r2c(SEXP data, int HermConj, int fftwplanopt, SEXP ret, bool inplace);
RcppExport SEXP _ravetools_fftw_r2c(SEXP dataSEXP, SEXP HermConjSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type HermConj(HermConjSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_r2c(data, HermConj, fftwplanopt, ret, inplace));
    return rcpp_result_gen;
END_RCPP
}
// mvfftw_r2c
SEXP mvfftw_r2c(SEXP data, int fftwplanopt, SEXP ret, bool inplace);
RcppExport SEXP _ravetools_mvfftw_r2c(SEXP dataSEXP, SEXP fftwplanoptSEXP, SEXP retSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type fftwplanopt(fftwplanoptSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(mvfftw_r2c(data, fftwplanopt, ret, inplace));
    return rcpp_result_gen;
END_RCPP
}
// fftw_c2c
SEXP fftw_c2c(SEXP data, int inverse, SEXP ret, bool inplace);
RcppExport SEXP _ravetools_fftw_c2c(SEXP dataSEXP, SEXP inverseSEXP, SEXP retSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type inverse(inverseSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_c2c(data, inverse, ret, inplace));
    return rcpp_result_gen;
END_RCPP
}
// fftw_c2r
SEXP fftw_c2r(SEXP data, int HermConj, SEXP ret, bool inplace);
RcppExport SEXP _ravetools_fftw_c2r(SEXP dataSEXP, SEXP HermConjSEXP, SEXP retSEXP, SEXP inplaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    Rcpp::traits::input_parameter< int >::type HermConj(HermConjSEXP);
    Rcpp::traits::input_parameter< SEXP >::type ret(retSEXP);
    Rcpp::traits::input_parameter< bool >::type inplace(inplaceSEXP);
    rcpp_result_gen = Rcpp::wrap(fftw_c2r(data, HermConj, ret, inplace));
    return rcpp_result_gen;
END_RCPP
}
// conjugate
SEXP conjugate(SEXP data);
RcppExport SEXP _ravetools_conjugate(SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(conjugate(data));
    return rcpp_result_gen;
END_RCPP
}
// shiftArray
SEXP shiftArray(const SEXP& x, const R_xlen_t& alongIdx, const R_xlen_t& unitIdx, const SEXP& shiftAmount);
RcppExport SEXP _ravetools_shiftArray(SEXP xSEXP, SEXP alongIdxSEXP, SEXP unitIdxSEXP, SEXP shiftAmountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t& >::type alongIdx(alongIdxSEXP);
    Rcpp::traits::input_parameter< const R_xlen_t& >::type unitIdx(unitIdxSEXP);
    Rcpp::traits::input_parameter< const SEXP& >::type shiftAmount(shiftAmountSEXP);
    rcpp_result_gen = Rcpp::wrap(shiftArray(x, alongIdx, unitIdx, shiftAmount));
    return rcpp_result_gen;
END_RCPP
}
// getDefaultNumThreads
SEXP getDefaultNumThreads();
RcppExport SEXP _ravetools_getDefaultNumThreads() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(getDefaultNumThreads());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ravetools_baselineArray", (DL_FUNC) &_ravetools_baselineArray, 8},
    {"_ravetools_collapser_cplx", (DL_FUNC) &_ravetools_collapser_cplx, 4},
    {"_ravetools_collapser_real", (DL_FUNC) &_ravetools_collapser_real, 4},
    {"_ravetools_fastColMeans", (DL_FUNC) &_ravetools_fastColMeans, 3},
    {"_ravetools_fastcov", (DL_FUNC) &_ravetools_fastcov, 5},
    {"_ravetools_fftw_r2c", (DL_FUNC) &_ravetools_fftw_r2c, 5},
    {"_ravetools_mvfftw_r2c", (DL_FUNC) &_ravetools_mvfftw_r2c, 4},
    {"_ravetools_fftw_c2c", (DL_FUNC) &_ravetools_fftw_c2c, 4},
    {"_ravetools_fftw_c2r", (DL_FUNC) &_ravetools_fftw_c2r, 4},
    {"_ravetools_conjugate", (DL_FUNC) &_ravetools_conjugate, 1},
    {"_ravetools_shiftArray", (DL_FUNC) &_ravetools_shiftArray, 4},
    {"_ravetools_getDefaultNumThreads", (DL_FUNC) &_ravetools_getDefaultNumThreads, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ravetools(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
